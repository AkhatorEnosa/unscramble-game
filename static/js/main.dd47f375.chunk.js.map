{"version":3,"sources":["components/Word.js","components/Form.js","components/Counter.js","components/All.js","App.js","serviceWorker.js","index.js"],"names":["Word","props","Fragment","className","style","getStatus","color","textShadow","children","Form","disabled","onChange","changeEvent","placeholder","value","getValue","onClick","checkEvent","shuffleEvent","nextEvent","showEvent","role","display","Counter","getScore","getWordCount","getTotal","All","status","word","randomWord","countScore","total","wordC","check","track","shuffle","next","show","typedWord","App","trackWord","e","setState","target","checkWord","state","toLowerCase","trim","words","includes","score","length","shuffleWord","randWord","reloadComponents","componentDidMount","nextWord","str","split","sort","Math","random","join","reloadApp","window","location","reload","unscrambleCount","number","fireMainComponent","alert","fired","showWord","loading","wordCount","fetch","response","json","this","capitalize","capitalizeFirstLetter","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dd47f375.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Word = (props) =>{\r\n\r\n    \treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<h2 className=\"tracked b--black-20 f4 f2-ns pt4\" style={props.getStatus === 'Correct' ? {color: 'green', textShadow: '0px 0px 0px yellow'} \r\n\t\t\t\t\t\t\t:props.getStatus === 'Incorrect' ? {color: 'red', textShadow: '0px 0px px yellow'}\r\n\t\t\t\t\t\t\t: {color: 'white'}}>\r\n\t\t\t\t\t{props.children}\r\n\t\t\t\t</h2>\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t\r\n}\r\n\r\nexport default Word;","import React from 'react';\r\n\r\nconst Form = (props) => {\t\r\n\treturn (\r\n\t\t\t<div className=\"w-100\">\r\n\t\t\t\t<input className = \"input-reset w-70 w-70-m w-30-ns f7 f6-ns pa2 pa3-ns mt2 br2 ba bg-white-60 mb3\" disabled = {props.getStatus === 'Correct' || props.getStatus === '1' ? true : false} onChange={props.changeEvent} placeholder = \"What is the word?\" value={props.getValue}/><br/>\r\n\t\t\t\t<div className=\"w-100 flex justify-center\">\r\n\t\t\t\t\t<button  onClick={props.checkEvent} className = {props.getStatus === 'Correct' || props.getStatus === '1' ? 'w-20 w-20-m w-10-ns f7 f6-ns br2 mt2 ba b--dark-green  bg-green white pa2 ml1 mv1 cursor-not-allowed border-box' : 'pointer w-20 w-20-m w-10-ns f7 f6-ns br2 mt2 ba b--dark-green bg-green white pa2 ml1 mv1 bg-animate hover-bg-dark-green border-box'} disabled = {props.getStatus === 'Correct' || props.getStatus === '1' ? true : false}>Go</button>\r\n\t\t\t\t\t<button  onClick={props.shuffleEvent} className = {props.getStatus === 'Correct' || props.getStatus === '1' ? 'w-20 w-20-m w-10-ns f7 f6-ns br2 mt2 ba b--dark-red bg-red white pa2 ml1 mv1 cursor-not-allowed border-box' : 'pointer w-20 w-20-m w-10-ns f7 f6-ns br2 mt2 ba b--dark-red bg-red white pa2 ml1 mv1 bg-animate hover-bg-dark-red border-box'} disabled = {props.getStatus === 'Correct' || props.getStatus === '1' ? true : false}>Shuffle</button>\r\n\t\t\t\t\t<button  onClick={props.nextEvent} disabled = {props.getStatus === 'Correct' || props.getStatus ? false : true} className = {props.getStatus === 'Correct' || props.getStatus === '1' ? 'pointer w-20 w-20-m w-10-ns f7 f6-ns br2 mt2 ba b--dark-blue bg-blue white pa2 ml1 mv1 bg-animate hover-bg-dark-blue border-box' : 'w-20 w-20-m w-10-ns f7 f6-ns br2 mt2 ba b--dark-blue bg-blue white pa2 ml1 mv1 cursor-not-allowed border-box'}>Next</button>\r\n\t\t\t\t\t<button  onClick={props.showEvent} className = {props.getStatus === 'Correct' || props.getStatus === '1' ? 'w-20 w-20-m w-10-ns f7 f6-ns br2 mt2 ba b--gray bg-light-gray black pa2 ml1 mv1 border-box' : 'pointer w-20 w-20-m w-10-ns f7 f6-ns br2 mt2 ba b--gray bg-light-gray black pa2 ml1 mv1 bg-animate hover-bg-dark-gray hover-white border-box'} disabled = {props.getStatus === 'Correct' ? true : false}>Show Word</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"w-100 flex justify-center\">\r\n\t\t\t\t\t<span className={props.getStatus === 'Correct' ? 'w-80 border-box br1 f7 f6-ns pa3 mt2 green bg-washed-green' : \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'w-80 border-box br1 f7 f6-ns pa3 mt2 red bg-washed-red'} role=\"alert\" style={props.getStatus === '' || props.getStatus === '1' ? {display: 'none'} : {display: 'block'}}>{props.getStatus}</span>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Form; ","import React from 'react';\r\n\r\nconst Counter = (props) => {\r\n\treturn (\r\n\t\t\t<div className=\"b f7 f6-ns flex flex-wrap justify-center tc pt0\">\r\n\t\t\t\t<div className=\"pa2 bg-light-yellow\">Gotten Words > {props.getScore}</div>\r\n\t\t\t\t<div className=\"pa2 bg-yellow\">Attempting Word Number > {props.getWordCount}</div>\r\n\t\t\t\t<div className=\"pa2 bg-gold\">Total Words > {props.getTotal} </div> \r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\nimport Word from './Word';\r\nimport Form from './Form';\r\nimport Counter from './Counter';\r\n\r\nconst All = (props) =>{\r\n\t\treturn (\r\n\t\t\t<div className=\"w-100 w-100-ns bg-white-50 br3 pb3\">\r\n\r\n\t\t\t\t<Word getStatus = {props.status}>\r\n\t\t\t\t\t{props.status === 'Correct' ? props.word \r\n\t\t\t\t\t\t: props.randomWord}\r\n\t\t\t\t</Word>\r\n\r\n                <Counter \r\n                \tgetScore = {props.countScore} \r\n                \tgetTotal = {props.total} \r\n                \tgetWordCount = {props.wordC}\r\n                />\r\n\r\n\t\t\t\t<Form  \t\t\t\t\t  \r\n\t\t\t\t\t  checkEvent = {props.check}\r\n\t                  changeEvent = {props.track}\r\n\t                  shuffleEvent = {props.shuffle}\r\n\t                  nextEvent = {props.next}\r\n\t                  showEvent = {props.show}\r\n\t                  // reloadApi = {props.componentDidMount}\r\n\t                  getStatus = {props.status}\r\n\t                  getValue = {props.typedWord}\r\n\t             />\r\n\t\t\t</div>\r\n\t\t)\r\n\t\r\n}\r\n\r\nexport default All;\r\n\r\n// {props.capitalize(props.status === 'Correct' ? props.word : props.randomWord)}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport All from './components/All';\n\nclass App extends Component { \n  constructor() {\n    super();\n\n    //Initialise the states\n      this.state = {\n        word: '',\n        typedWord: '',\n        loading: true,\n        status: '',\n        randomWord: '',\n        score: 0,\n        fired: false,\n        words: [],\n        number: 0,\n        wordCount: 0\n      }\n\n  }\n\n\n  // check if component has mounted then call api and setState\n  async componentDidMount(){\n      const url = \"https://random-word-api.herokuapp.com/word?number=1\";\n      const response = await fetch(url);\n      const word = await response.json();\n\n      this.setState({\n          loading: false,\n          word: word[0],\n          randomWord: this.randWord(word[0]), //Randomize the gotten word\n          wordCount: this.state.wordCount + 1\n      })\n\n      // console.log(this.state.word);\n      // console.log(this.state.wordCount);\n  }\n\n\n  // Capitalize the first letter of a string\n  // capitalizeFirstLetter = (word) => {\n  //   const newLetter = word[0].toUpperCase() + word.slice(1)\n\n  //   return newLetter;\n  // }\n\n  // get the value of input field\n  trackWord = (e) => {\n    this.setState({\n      typedWord: e.target.value\n    });\n  }\n\n\n  // checking for errors and others\n  checkWord = (e) => {\n    if (this.state.word === this.state.typedWord.toLowerCase().trim()){\n       if(!this.state.words.includes(this.state.typedWord.toLowerCase().trim())) {\n           this.setState({ \n            status : 'Correct', typedWord: '',\n            score: this.state.score + 1, \n            words: [...this.state.words, this.state.typedWord.toLowerCase().trim()]\n          });\n       }else {\n        this.setState({ status : 'Please wait for new word to finish loading first', typedWord: ''});\n       }\n\n    }else { \n      this.setState({ status : 'Incorrect', typedWord: ''});\n    }\n\n    if(this.state.typedWord.length === 0) {\n      this.setState({ status: 'Field cannot be empty'});\n    }\n  }\n\n  // shuffling a string\n  shuffleWord = () => {\n      this.setState({\n        randomWord: this.randWord(this.randWord(this.state.word))\n      });\n  }\n\n\n  // Re-call componentDidMount and set states again\n  reloadComponents = () => {\n    this.componentDidMount();\n      this.setState({\n        typedWord: '',\n        status: '',\n        randomWord: ' '\n      });\n  }\n\n\n  // getting next word\n  nextWord = () => {\n    this.reloadComponents();\n  }\n\n\n// Randomize word\n  randWord = (str) => {\n    let newWord = str.split('').sort(()=>(Math.random()-0.5)).join('');\n    return newWord;\n  }\n\n\n// Reload App\n  reloadApp = () => {\n    window.location.reload(false);\n  }\n\n\n// How many words to Unscramble\nunscrambleCount = (e) => {\n  this.setState({\n    number : e.target.value\n  });\n}\n\n\n// Go to main components app\nfireMainComponent = () => {\n  if(this.state.number === '') {\n     alert('Field cannot be empty')\n    }else if ((this.state.number === '---Select Number---') || (this.state.number === 0)) {\n      alert('Choose a valid number')\n    } else{\n      this.setState({\n        fired: true\n      })\n    }\n}\n\nshowWord = (e) => {\n\n   if(!this.state.words.includes(this.state.word)) {\n       this.setState({ \n        status : '1', typedWord: this.state.word,\n        score: this.state.score, \n        randomWord : this.state.word,\n        words: [...this.state.words, this.state.typedWord]\n      });\n    }\n}\n\n   render () {\n\n      const { status,score,typedWord,word,randomWord,loading,number,fired, wordCount } = this.state;\n\n\n        if (wordCount > 1 && wordCount > number){\n          return (\n            <div className=\"tc pa1 mt6\">\n                <h2 className=\"f4 f2-ns red\">Oops!!! Maybe lucky next time!!!</h2>\n                <p className=\"red f7 f6-ns\">You tried your best but could not unscramble all the words correctly. <br/>\n                Your total score is <span className=\"b\"> {score}</span>.</p>\n                <button className = \"pointer w-40 w-30-ns br2 mt2 ba b--dark-blue bg-blue white pa2 ml1 mv1 bg-animate hover-bg-dark-blue\" onClick = {this.reloadApp}>Try Again</button>\n            </div>\n          )\n\n        } else if ((score > 0) && (score == number)){ \n            return (\n            <div className=\"tc pa1 mt6\">\n                <h2 className=\"f4 f2-ns green\">Congratulations!!!!</h2>\n                <p className=\"green f7 f4-ns\">You have successfully answered all {this.state.number} questions completely. </p>\n                <button className = \"pointer w-40 w-30-ns br2 mt2 ba b--dark-red bg-orange white pa2 ml1 mv1 bg-animate hover-bg-red\" onClick = {this.reloadApp}>Restart</button>\n            </div>\n          )\n        } else if (loading){ \n            return <div className=\"tc mt7 white\">Loading...</div>\n        } else if(!word.length){\n            return <div className=\"tc\">Did not get a word</div>\n        } else if (fired === true){\n          return (\n            <div className=\"tc pa2 pa5-ns pt5 pb2\">\n              <h1 className=\"w-100-ns f1-ns tc yellow\">UNSCRAMBLE <br/> GAME</h1>\n                <All \n                  getStatus = {status}\n                  capitalize = {this.capitalizeFirstLetter}\n                  word = {word}\n                  randomWord = {randomWord}\n\n                  check = {this.checkWord}\n                  track = {this.trackWord}\n                  shuffle = {this.shuffleWord}\n                  next = {this.nextWord}\n                  show = {this.showWord}\n                  status = {status}\n                  typedWord = {typedWord}\n                  countScore = {score}\n                  total = {number}\n                  wordC = {wordCount}\n                />\n            </div>\n          )\n        }else{ \n\n        return (\n            <div className = \"tc pa5\">\n              <h1 className=\"w-100-ns f1-ns tc yellow\">UNSCRAMBLE <br/> GAME</h1>\n              <p className=\"green \">How many words do you want to Unscramble?</p>\n\n              <div className=\"w-100 flex flex-wrap justify-center\">\n                <select className = \"w-70 w-30-ns pa2 pa3-ns mt2 br2 input-reset ba bg-white-60 f7 f6-ns\" onChange = {this.unscrambleCount}>\n                  <option>---Select Number---</option>\n                  <option>5</option>\n                  <option>10</option>\n                  <option>15</option>\n                  <option>20</option>\n                  <option>25</option>\n                </select>\n\n                <button className = \"w-30 w-10-m w-10-ns f7 f6-ns pointer br2 mt2 ba b--dark-green bg-green white pa2 ml1 bg-animate hover-bg-dark-green border-box\" onClick = {this.fireMainComponent}>Go</button>\n              </div>\n            </div>\n          )\n      }\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}