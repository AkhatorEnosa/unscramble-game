{"version":3,"sources":["components/Word.js","components/Form.js","components/Counter.js","components/All.js","App.js","serviceWorker.js","index.js"],"names":["Word","props","Fragment","className","style","getStatus","color","children","Form","autoFocus","disabled","onChange","changeEvent","placeholder","value","getValue","onClick","checkEvent","marginRight","shuffleEvent","nextEvent","Counter","getScore","getTotal","All","status","word","randomWord","countScore","total","check","track","shuffle","next","typedWord","App","trackWord","e","setState","target","checkWord","state","words","includes","score","length","shuffleWord","randWord","reloadComponents","componentDidMount","nextWord","str","split","sort","Math","random","join","reloadApp","window","location","reload","unscrambleCount","number","fireMainComponent","alert","fired","loading","fetch","response","json","this","console","log","capitalize","capitalizeFirstLetter","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d2e853c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Word = (props) =>{\r\n\r\n    \treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<h2 className=\"ttu b--black-20\" style={props.getStatus === 'Correct' ? {color: 'green'} \r\n\t\t\t\t\t\t\t:props.getStatus === 'Incorrect' ? {color: 'red'}\r\n\t\t\t\t\t\t\t: {color: 'white'}}>\r\n\t\t\t\t\t{props.children}\r\n\t\t\t\t</h2>\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t\r\n}\r\n\r\nexport default Word;","import React from 'react';\r\n\r\nconst Form = (props) => {\t\r\n\treturn (\r\n\t\t\t<div className=\"db-m\">\r\n\t\t\t\t<input autoFocus className = \"pa2 w-50 mt2 br2 b--black-20 ba mb1\" disabled = {props.getStatus === 'Correct' ? true : false} onChange={props.changeEvent} placeholder = \"What is the word?\" value={props.getValue}/><br/>\r\n\t\t\t\t<div className=\"w-100 flex flex-wrap justify-center\">\r\n\t\t\t\t\t<button className = {props.getStatus === 'Correct' ? 'w-20-m br2 mt2 ba b--dark-green bg-green white pa2 ml1 mv1 cursor-not-allowed border-box' : 'pointer w-20-m br2 mt2 ba b--dark-green bg-green white pa2 ml1 mv1 bg-animate hover-bg-dark-green border-box'} disabled = {props.getStatus === 'Correct' ? true : false} onClick={props.checkEvent} style={{marginRight: '10px'}}>Go</button>\r\n\t\t\t\t\t<button className = {props.getStatus === 'Correct' ? 'w-20-m br2 mt2 ba b--dark-red bg-red white pa2 ml1 mv1 cursor-not-allowed border-box' : 'pointer w-20-m br2 mt2 ba b--dark-red bg-red white pa2 ml1 mv1 bg-animate hover-bg-dark-red border-box'} disabled = {props.getStatus === 'Correct' ? true : false} onClick={props.shuffleEvent} style = {{marginRight: '10px'}}>Shuffle</button>\r\n\t\t\t\t\t<button className = {props.getStatus === 'Correct' ? 'pointer w-20-m br2 mt2 ba b--dark-blue bg-blue white pa2 ml1 mv1 bg-animate hover-bg-dark-blue border-box' : 'w-20-m br2 mt2 ba b--dark-blue bg-blue white pa2 ml1 mv1 cursor-not-allowed border-box'} onClick={props.nextEvent} disabled = {props.getStatus === 'Correct' ? false : true}>Next</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"mt3\">\r\n\t\t\t\t\t<i className={props.getStatus === 'Correct' ? 'green f6 bg-white br2' : 'red f6 bg-white br2'}>{props.getStatus}</i>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Form; ","import React from 'react';\r\n\r\nconst Counter = (props) => {\r\n\treturn (\r\n\t\t\t<div className=\"b\">\r\n\t\t\t\tScore: {props.getScore} / {props.getTotal}\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\nimport Word from './Word';\r\nimport Form from './Form';\r\nimport Counter from './Counter';\r\n\r\nconst All = (props) =>{\r\n\t\treturn (\r\n\t\t\t<div className=\"bg-white-60 pt2 pb4 br3 w-100 w-100-m\">\r\n\r\n\t\t\t\t<Word getStatus = {props.status}>\r\n\t\t\t\t\t{props.status === 'Correct' ? props.word \r\n\t\t\t\t\t\t: props.randomWord}\r\n\t\t\t\t</Word>\r\n\r\n                <Counter getScore = {props.countScore} getTotal = {props.total}/>\r\n\r\n\t\t\t\t<Form  \t\t\t\t\t  \r\n\t\t\t\t\t  checkEvent = {props.check}\r\n\t                  changeEvent = {props.track}\r\n\t                  shuffleEvent = {props.shuffle}\r\n\t                  nextEvent = {props.next}\r\n\t                  // reloadApi = {props.componentDidMount}\r\n\t                  getStatus = {props.status}\r\n\t                  getValue = {props.typedWord}/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t\r\n}\r\n\r\nexport default All;\r\n\r\n// {props.capitalize(props.status === 'Correct' ? props.word : props.randomWord)}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport All from './components/All';\n\n\nclass App extends Component { \n  constructor() {\n    super();\n\n    //Initialise the states\n      this.state = {\n        word: '',\n        typedWord: '',\n        loading: true,\n        status: '',\n        randomWord: '',\n        score: 0,\n        fired: false,\n        words: [],\n        number: 0\n      }\n\n  }\n\n\n  // check if component has mounted then call api and setState\n  async componentDidMount(){\n      const url = \"https://random-word-api.herokuapp.com/word?number=1\";\n      const response = await fetch(url);\n      const word = await response.json();\n\n      this.setState({\n          loading: false,\n          word: word[0],\n          randomWord: this.randWord(word[0]) //Randomize the gotten word\n      })\n\n      console.log(this.state.word);\n  }\n\n\n  // Capitalize the first letter of a string\n  // capitalizeFirstLetter = (word) => {\n  //   const newLetter = word[0].toUpperCase() + word.slice(1)\n\n  //   return newLetter;\n  // }\n\n  // get the value of input field\n  trackWord = (e) => {\n    this.setState({\n      typedWord: e.target.value\n    });\n  }\n\n\n  // checking for errors and others\n  checkWord = (e) => {\n    if (this.state.word === this.state.typedWord){\n       if(!this.state.words.includes(this.state.typedWord)) {\n           this.setState({ \n            status : 'Correct', typedWord: '',\n            score: this.state.score + 1, \n            words: [...this.state.words, this.state.typedWord]\n          });\n       }else {\n        this.setState({ status : 'Please wait for new word to finish loading first', typedWord: ''});\n       }\n\n    }else { \n      this.setState({ status : 'Incorrect', typedWord: ''});\n    }\n\n    if(this.state.typedWord.length === 0) {\n      this.setState({ status: 'Field cannot be empty'});\n    }\n  }\n\n  // shuffling a string\n  shuffleWord = (e) => {\n    this.setState({\n      randomWord: this.randWord(this.state.word)\n    });\n  }\n\n\n  // Re-call componentDidMount and set states again\n  reloadComponents = () => {\n    this.componentDidMount();\n      this.setState({\n        typedWord: '',\n        status: ' ',\n        randomWord: ' '\n      });\n  }\n\n\n  // getting next word\n  nextWord = () => {\n    this.reloadComponents();\n  }\n\n\n// Randomize word\n  randWord = (str) => {\n    let newWord = str.split('').sort(()=>(Math.random()-0.5)).join('');\n    return newWord;\n  }\n\n\n// Reload App\n  reloadApp = () => {\n    window.location.reload(false);\n  }\n\n\n// How many words to Unscramble\nunscrambleCount = (e) => {\n  this.setState({\n    number : e.target.value\n  });\n}\n\n\n// Go to main components app\nfireMainComponent = () => {\n  if(this.state.number === '') {\n     alert('Field cannot be empty')\n    }else if ((this.state.number === '---Select Number---') || (this.state.number === 0)) {\n      alert('Choose a valid number')\n    } else{\n      this.setState({\n        fired: true\n      })\n    }\n}\n\n\n   render () {\n\n      const { status,score,typedWord,word,randomWord,loading,number,fired } = this.state;\n\n\n        if (loading){ \n            return <div className=\"tc mt7 white\">Loading...</div>\n        } else if(!word.length){\n            return <div className=\"tc\">Did not get a word</div>\n        } else if ((score > 0) && (score == number)){\n            return (\n              <div className=\"tc pa6\">\n                  <h2 className=\"f1 green\">Congratulations!!!!</h2>\n                  <p className=\"green\">You have successfully answered all {number} questions completely. </p>\n                  <button className = \"pointer w-30 br2 mt2 ba b--dark-red bg-orange white pa2 ml1 mv1 bg-animate\" onClick = {this.reloadApp}>Restart</button>\n              </div>\n            )\n\n        } else if (fired === true){\n          return (\n            <div className=\"tc pa5\">\n              <h1 className=\"w-100-ns f1-ns tc white\">Unscrambled</h1>\n                <All \n                  getStatus = {status}\n                  capitalize = {this.capitalizeFirstLetter}\n                  word = {word}\n                  randomWord = {randomWord}\n\n                  check = {this.checkWord}\n                  track = {this.trackWord}\n                  shuffle = {this.shuffleWord}\n                  next = {this.nextWord}\n                  status = {status}\n                  typedWord = {typedWord}\n                  countScore = {score}\n                  total = {number}\n                />\n            </div>\n          )\n        }else{ \n\n        return (\n            <div className = \"tc pa5\">\n              <h1 className=\"w-100-ns f1-ns tc white\">Unscrambled</h1>\n              <p className=\"green \">How many words do you want to Unscramble?</p>\n\n              <div className=\"w-100 flex flex-wrap justify-center\">\n                <select className = \"w-30-ns pa2 mt2 br2 b--black-20 ba\" onChange = {this.unscrambleCount} autoFocus>\n                  <option>---Select Number---</option>\n                  <option>5</option>\n                  <option>10</option>\n                  <option>15</option>\n                  <option>20</option>\n                  <option>25</option>\n                </select>\n\n                <button className = \"w-10-ns pointer br2 mt2 ba b--dark-green bg-green white pa2 ml1 bg-animate hover-bg-dark-green border-box\" onClick = {this.fireMainComponent}>Go</button>\n              </div>\n            </div>\n          )\n      }\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}